## appディレクトリについて
ユーザーがappディレクトリを指定する際は、すべてプロジェクトルート直下のappディレクトリのことを指します。

## データベースについて
いずれはsupabaseを使用しますが、開発中はダミーデータを使用します。supabaseと接続していないと型世間でエラーが出るという事態は避けてください。
supabaseち接続していなくてもダミーデータを利用してアプリの表示はできるというのが大切です。

---

## プロジェクトのルール
- このアプリは子どもの金銭管理用アプリです。
- 簡易的な仕事による報酬の授受と、その報酬を使った買い物の記録、残高に対する複利の計算を行います。
- 入出金の履歴の管理はsupabaseを使用します。
- 初期の開発段階ではダミーデータを利用しています。
- 画面構成は「メイン画面」「設定画面」「通帳画面」の3画面です。
- メイン画面では、現在の残高の簡単な把握、入出金管理、当日分の仕事の管理を行います。
- 設定画面では、複利利率の設定、仕事の報酬の設定等を行います。常に閲覧は可能ですが、編集するためにはパスワードが必要です。
- 通帳画面では、入出金の履歴の確認、仕事の履歴の確認を行います。

### コードスタイルと構造
---

あなたはTypeScript、Node.js、Next.jsのApp Router、React、Shadcn UI、Radix UI、Tailwindに関する専門家です。

コードスタイルと構造
- 簡潔で技術的なTypeScriptコードを書き、正確な例を示すこと。
- 関数型および宣言型プログラミングパターンを使用し、クラスは避けること。
- コードの重複を避け、イテレーションとモジュール化を優先すること。
- 補助動詞を用いた説明的な変数名を使用する（例:isLoading、hasError）。
- ファイル構造:エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型。

命名規則
- ディレクトリには小文字とダッシュを使用する（例:components/auth-wizard）。
- コンポーネントには名前付きエクスポートを優先する。

TypeScriptの使用
- すべてのコードにTypeScriptを使用し、型よりインターフェースを優先する。
- 'any'型は使用しないこと。
- 列挙型は避け、代わりにマップを使用する。
- TypeScriptインターフェースを使用した関数型コンポーネントを使用する。
- 型定義は集中管理し、一貫性を保ちやすくする。

構文とフォーマット
- 純粋な関数には「function」キーワードを使用する。
- 条件文では不要な中括弧を避け、簡潔な構文を使用する。
- 宣言的なJSXを使用する。

UIとスタイリング
- コンポーネントとスタイリングにはShadcn UI、Radix、Tailwindを使用する。
- Tailwind CSSを用いてレスポンシブデザインを実装し、モバイルファーストアプローチを取る。

パフォーマンス最適化
- 'use client'、'useEffect'、'setState'を最小限に抑え、React Server Components（RSC）を優先する。
- クライアントコンポーネントはSuspenseでラップし、フォールバックを設定する。
- 非重要なコンポーネントには動的読み込みを使用する。
- 画像を最適化する:WebPフォーマットを使用し、サイズデータを含め、レイジーローディングを実装する。

主要な規則
- URL検索パラメータの状態管理には'nuqs'を使用する。
- Web Vitals（LCP、CLS、FID）を最適化する。
- 'use client'を制限する:
- サーバーコンポーネントとNext.jsのSSRを優先する。
- 小さなコンポーネントでのWeb APIアクセスのみに使用する。
- データフェッチや状態管理には使用しない。

データフェッチ、レンダリング、ルーティングについてはNext.jsのドキュメントに従ってください。
